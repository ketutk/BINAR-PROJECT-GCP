// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "rhel-openssl-3.0.x"] // komentari jika menggunakan database local
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // komentari jika menggunakan database local
}

enum ROLE {
  USER
  ADMIN
}

enum CLASS {
  ECONOMY
  PREMIUM_ECONOMY
  BUSINESS
  FIRST_CLASS
}

enum FLIGHT_TYPE {
  DOMESTIC
  INTERNATIONAL
}

enum STATUS_PAID {
  ISSUED
  UNPAID
  CANCELLED
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  is_verified   Boolean        @default(false)
  role          ROLE           @default(USER)
  profile       Profile?
  notifications Notification[]
  payments      Payment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model Profile {
  id         String    @id @default(uuid())
  user_id    String    @unique
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  address    String?
  phone      String?
  occupation String?
  birthdate  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Notification {
  id      String  @id @default(uuid())
  title   String
  message String
  is_read Boolean @default(false)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Airport {
  id           String   @id @default(uuid())
  airport_code String   @unique
  name         String
  city         String
  country      String
  visited      Int      @default(0)
  image_url    String
  arrives      Flight[] @relation(name: "arrive")
  departure    Flight[] @relation(name: "departure")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("airports")
}

model Plane {
  id                   String   @id @default(uuid())
  plane_code           String   @unique
  airline              String
  baggage              Int      @default(15)
  cabin_baggage        Int      @default(5)
  economy_seat         Int
  premium_economy_seat Int
  business_seat        Int
  first_class_seat     Int
  flight               Flight[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("planes")
}

model Category {
  id         String      @id @default(uuid())
  type       String      @unique
  discount   Int
  passengers Passenger[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("categories")
}

model Tax {
  id      Int @id @default(1)
  percent Int @default(5)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("taxes")
}

model Passenger {
  id          String   @id @default(uuid())
  name        String
  birthdate   DateTime
  identity_id String
  citizenship String
  category_id String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  booking_id  String
  booking     Booking  @relation(fields: [booking_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("passengers")
}

model Flight {
  id                 String         @id @default(uuid())
  plane_code         String
  plane              Plane          @relation(fields: [plane_code], references: [plane_code], onDelete: Cascade)
  from_code          String
  to_code            String
  from               Airport        @relation(fields: [from_code], references: [airport_code], onDelete: Cascade, name: "departure")
  to                 Airport        @relation(fields: [to_code], references: [airport_code], onDelete: Cascade, name: "arrive")
  departureAt        DateTime
  arriveAt           DateTime
  is_return          Boolean        @default(false)
  return_departureAt DateTime?
  return_arriveAt    DateTime?
  flight_type        FLIGHT_TYPE
  flight_classes     Flight_Class[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@map("flights")
}

model Flight_Class {
  id              String    @id @default(uuid())
  flight_id       String
  flight          Flight    @relation(fields: [flight_id], references: [id], onDelete: Cascade)
  name            CLASS
  price           Int
  available_seats Int
  bookings        Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("flight_classes")
}

model Payment {
  id            String      @id @default(uuid())
  user_id       String
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  total_payment Int
  qr_url        String
  status        STATUS_PAID @default(UNPAID)
  expiredAt     DateTime
  booking       Booking?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model Booking {
  id              String       @id @default(uuid())
  payment_id      String       @unique
  payment         Payment      @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  passengers      Passenger[]
  flight_class_id String
  flight_class    Flight_Class @relation(fields: [flight_class_id], references: [id], onDelete: Cascade)
  total_seat      Int
  total_price     Int
  include_return  Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}
